/*
 * Copyright 2019 The nity.io Moqui Spring Boot Project Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    ext {
        springBootVersion = '2.1.2.RELEASE'
    }
    repositories { jcenter() }
}

//sample项目不install
allprojects {
    gradle.taskGraph.whenReady {taskGraph ->
        tasks.each { task ->
            if (task.name == "install" && project.name.contains("sample")){
                task.enabled = false
            }
        }
    }
}

subprojects {
    buildscript {
        ext {
            springBootVersion = '2.1.2.RELEASE'
        }
        repositories {
            mavenCentral()
        }
        dependencies {
            classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        }
    }
    
    group = 'io.nity.moqui'
    version = '0.9.0'
    
    apply plugin: 'java'
    apply plugin: 'groovy'
    apply plugin: 'maven'

    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'

    repositories {
        jcenter() // http://jcenter.bintray.com
    }
    
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
        options.addStringOption('encoding', 'UTF-8')
        options.addStringOption('charSet', 'UTF-8')
    }

    artifacts {
        archives sourcesJar
//        archives javadocJar
    }
    
    task allDeps(type: DependencyReportTask) {}
}