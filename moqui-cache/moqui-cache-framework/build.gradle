/*
 * This software is in the public domain under CC0 1.0 Universal plus a
 * Grant of Patent License.
 *
 * To the extent possible under law, the author(s) have dedicated all
 * copyright and related and neighboring rights to this software to the
 * public domain worldwide. This software is distributed without any
 * warranty.
 *
 * You should have received a copy of the CC0 Public Domain Dedication
 * along with this software (see the LICENSE.md file). If not, see
 * <http://creativecommons.org/publicdomain/zero/1.0/>.
 */

//tasks.withType(JavaCompile) { options.compilerArgs << "-Xlint:unchecked" }
//tasks.withType(GroovyCompile) { options.compilerArgs << "-Xlint:unchecked" }
// tasks.withType(GroovyCompile) { options.compilerArgs << "-Xlint:deprecation" }

version = '2.1.1'

apply plugin: 'groovy'
// to run gradle-versions-plugin use "gradle dependencyUpdates"
apply plugin: 'com.github.ben-manes.versions'
// uncomment to add the Error Prone compiler; not enabled by default (doesn't work on Travis CI)
buildscript {
    repositories {
        jcenter()
        // uncomment to add the Error Prone compiler: maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.20.0'
        // uncomment to add the Error Prone compiler: classpath 'net.ltgt.gradle:gradle-errorprone-plugin:0.0.8'
    }
}
dependencyUpdates.resolutionStrategy = { componentSelection { rules -> rules.all { ComponentSelection selection ->
    boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm', 'b'].any { qualifier -> selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/ }
    if (rejected) selection.reject('Release candidate')
} } }

// NOTE: packages should match group, name, version found at https://bintray.com/bintray/jcenter
repositories {
    jcenter() // http://jcenter.bintray.com
}

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

groovydoc {
    docTitle = "Moqui Framework Cache ${version}"
    source = sourceSets.main.allSource
}

// Log4J has annotation processors, disable to avoid warning
tasks.withType(JavaCompile) { options.compilerArgs << "-proc:none" }
tasks.withType(GroovyCompile) { options.compilerArgs << "-proc:none" }

dependencies {
    compile project(':moqui-framework')

    // Groovy
    compile 'org.codehaus.groovy:groovy:2.5.4' // Apache 2.0
    
    //groovydoc
    compileOnly 'org.codehaus.groovy:groovy-templates:2.5.4' // Apache 2.0
    compileOnly 'org.fusesource.jansi:jansi:1.17.1'
    
    // Findbugs need only during compile (used by freemarker and various moqui classes)
    compileOnly 'com.google.code.findbugs:annotations:3.0.1'
    
    // Java Specifications
    compile 'javax.cache:cache-api:1.1.0'
    
    // SLF4J
    compile 'org.slf4j:slf4j-api:1.7.25'
    compile 'ch.qos.logback:logback-classic:1.2.3'

    // ========== test dependencies ==========
    // spock-core depends on groovy-all but we are including selected groovy modules, so don't get its dependencies
    testCompile module('org.spockframework:spock-core:1.1-groovy-2.4') // Apache 2.0
    testCompile 'junit:junit:4.12' // Apache 2.0
}

// setup task dependencies to make sure the start sourceSets always get run
compileTestGroovy.dependsOn classes
sourceSets.test.compileClasspath += files(sourceSets.main.output.classesDirs)

// by default the Java plugin runs test on build, change to not do that (only run test if explicit task)
// no longer workds as of gradle 4.8 or possibly earlier, use clear() instead: check.dependsOn.remove(test)
check.dependsOn.clear()

test {
    dependsOn cleanTest
    include '**/*MoquiSuite.class'

    testLogging.showStandardStreams = true; testLogging.showExceptions = true

    classpath += files(sourceSets.main.output.classesDirs); classpath += files(projectDir.absolutePath)
    // filter out classpath entries that don't exist (gradle adds a bunch of these), or ElasticSearch JarHell will blow up
    classpath = classpath.filter { it.exists() }

    beforeTest { descriptor -> logger.lifecycle("Running test: ${descriptor}") }
}

jar {
    // this is necessary otherwise jar won't build when war plugin is applied
    enabled = true
    manifest { attributes 'Implementation-Title': 'Moqui Framework Cache', 'Implementation-Version': version, 'Implementation-Vendor': 'nity.io Moqui Spring Boot Project' }
    from sourceSets.main.output
}

