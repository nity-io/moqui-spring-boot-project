/*
 * This software is in the public domain under CC0 1.0 Universal plus a
 * Grant of Patent License.
 *
 * To the extent possible under law, the author(s) have dedicated all
 * copyright and related and neighboring rights to this software to the
 * public domain worldwide. This software is distributed without any
 * warranty.
 *
 * You should have received a copy of the CC0 Public Domain Dedication
 * along with this software (see the LICENSE.md file). If not, see
 * <http://creativecommons.org/publicdomain/zero/1.0/>.
 */

tasks.withType(JavaCompile) { options.compilerArgs << "-Xlint:unchecked" }
tasks.withType(GroovyCompile) { options.compilerArgs << "-Xlint:unchecked" }
// tasks.withType(GroovyCompile) { options.compilerArgs << "-Xlint:deprecation" }

version = '2.1.1'

apply plugin: 'groovy'
// to run gradle-versions-plugin use "gradle dependencyUpdates"
apply plugin: 'com.github.ben-manes.versions'
// uncomment to add the Error Prone compiler; not enabled by default (doesn't work on Travis CI)
// apply plugin: 'net.ltgt.errorprone'
buildscript {
    repositories {
        jcenter()
        // uncomment to add the Error Prone compiler: maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.20.0'
        // uncomment to add the Error Prone compiler: classpath 'net.ltgt.gradle:gradle-errorprone-plugin:0.0.8'
    }
}
dependencyUpdates.resolutionStrategy = { componentSelection { rules -> rules.all { ComponentSelection selection ->
    boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm', 'b'].any { qualifier -> selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/ }
    if (rejected) selection.reject('Release candidate')
} } }

// NOTE: packages should match group, name, version found at https://bintray.com/bintray/jcenter
repositories {
    jcenter() // http://jcenter.bintray.com
}

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

groovydoc {
    docTitle = "Moqui Framework ${version}"
    source = sourceSets.main.allSource
}

// Log4J has annotation processors, disable to avoid warning
tasks.withType(JavaCompile) { options.compilerArgs << "-proc:none" }
tasks.withType(GroovyCompile) { options.compilerArgs << "-proc:none" }

dependencies {
    compile project(':moqui-resource:moqui-resource-framework')

    // Groovy
    compile 'org.codehaus.groovy:groovy:2.5.4' // Apache 2.0
    compile 'org.codehaus.groovy:groovy-dateutil:2.5.4' // Apache 2.0
    compile 'org.codehaus.groovy:groovy-json:2.5.4' // Apache 2.0
    compile 'org.codehaus.groovy:groovy-templates:2.5.4' // Apache 2.0
    compile 'org.codehaus.groovy:groovy-xml:2.5.4' // Apache 2.0
    // jansi is needed for groovydoc only, so in providedCompile (not included in war)
    compileOnly 'org.fusesource.jansi:jansi:1.17.1'
    // Findbugs need only during compile (used by freemarker and various moqui classes)
    compileOnly 'com.google.code.findbugs:annotations:3.0.1'

    implementation "org.springframework.boot:spring-boot-starter-jta-bitronix:${springBootVersion}"

    // ========== Libraries from jcenter ==========

    compile 'org.springframework:spring-jdbc:5.1.4.RELEASE'

    // Apache Commons
    compile 'org.apache.commons:commons-csv:1.6' // Apache 2.0
    compile 'org.apache.commons:commons-email:1.5' // Apache 2.0
    compile 'org.apache.commons:commons-lang3:3.8.1' // Apache 2.0; used by cron-utils
    compile 'commons-beanutils:commons-beanutils:1.9.3' // Apache 2.0
    compile 'commons-collections:commons-collections:3.2.2' // Apache 2.0
    compile 'commons-digester:commons-digester:2.1' // Apache 2.0
    compile 'commons-fileupload:commons-fileupload:1.3.3' // Apache 2.0
    compile 'commons-io:commons-io:2.6' // Apache 2.0
    compile 'commons-logging:commons-logging:1.2' // Apache 2.0
    compile 'commons-validator:commons-validator:1.6' // Apache 2.0

    compile module('com.cronutils:cron-utils:7.0.6') // Apache 2.0

    // Flexmark (markdown)
    compile 'com.vladsch.flexmark:flexmark:0.34.56'
    compile 'com.vladsch.flexmark:flexmark-ext-tables:0.34.56'
    compile 'com.vladsch.flexmark:flexmark-ext-toc:0.34.56'

    // Freemarker
    compile 'org.freemarker:freemarker:2.3.28' // Apache 2.0

    // Java Specifications
    compile 'javax.transaction:jta:1.1'
    compile 'javax.cache:cache-api:1.1.0'
    compile 'javax.jcr:jcr:2.0'
    // jaxb-api no longer included in Java 9 and later, also tested with openjdk-8
    compile 'javax.xml.bind:jaxb-api:2.3.0' // CDDL 1.1
    // using websocket-api 1.0, don't update to 1.1 until used in Jetty, Tomcat, etc
    compile 'javax.websocket:javax.websocket-api:1.0'
//    providedCompile 'javax.servlet:javax.servlet-api:3.1.0'
    // Specs not needed by default:
    // compile 'javax.resource:connector-api:1.5'
    // compile 'javax.jms:jms:1.1'

    // H2 Database
    compile 'com.h2database:h2:1.4.197' // MPL 2.0, EPL 1.0

    // Jackson Databind (JSON, etc)
    compile 'com.fasterxml.jackson.core:jackson-databind:2.9.7'
    compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:2.9.7'

    // Jetty HTTP Client and Proxy Servlet
    compile 'org.eclipse.jetty:jetty-client:9.4.12.v20180830' // Apache 2.0
    compile 'org.eclipse.jetty:jetty-proxy:9.4.12.v20180830' // Apache 2.0

    // javax.mail
    compile 'com.sun.mail:javax.mail:1.6.2' // CDDL

    // Joda Time (used by elasticsearch, aws)
    compile 'joda-time:joda-time:2.10.1' // Apache 2.0

    // JSoup (HTML parser, cleaner)
    compile 'org.jsoup:jsoup:1.11.3' // MIT
    
    // SLF4J
    compile 'org.slf4j:slf4j-api:1.7.25'
    compile 'ch.qos.logback:logback-classic:1.2.3'

    // SubEtha SMTP (module as depends on old javax.mail location; also uses SLF4J, activation included elsewhere)
    compile module('org.subethamail:subethasmtp:3.1.7')

    // Apache XML-RPC (are all modules to not get dependencies which have conflicts)
    compile module('org.apache.ws.commons.util:ws-commons-util:1.0.2') // Apache 2.0
    compile module('org.apache.xmlrpc:xmlrpc-common:3.1.3') // Apache 2.0
    compile module('org.apache.xmlrpc:xmlrpc-server:3.1.3') // Apache 2.0
    // NOTE: Apache XML-RPC client requires Commons HttpClient and is not used much so currently commented
    // compile module('org.apache.xmlrpc:xmlrpc-client:3.1.3') // Apache 2.0

    // Snake YAML
    compile 'org.yaml:snakeyaml:1.23' // Apache 2.0

    // Apache Jackrabbit - uncomment here or include elsewhere when Jackrabbit repository configurations are used
    // compile 'org.apache.jackrabbit:jackrabbit-jcr-rmi:2.12.1' // Apache 2.0
    // compile 'org.apache.jackrabbit:jackrabbit-jcr2dav:2.12.1' // Apache 2.0

    // Apache Commons JCS - Only needed when using JCSCacheToolFactory
    // compile 'org.apache.commons:commons-jcs-jcache:2.0-beta-1' // Apache 2.0

    // Liquibase (for future reference, not used yet)
    // compile 'org.liquibase:liquibase-core:3.4.2' // Apache 2.0

    // ========== test dependencies ==========
    // spock-core depends on groovy-all but we are including selected groovy modules, so don't get its dependencies
    testCompile module('org.spockframework:spock-core:1.1-groovy-2.4') // Apache 2.0
    testCompile 'junit:junit:4.12' // Apache 2.0
    testCompile 'org.hamcrest:hamcrest-core:1.3' // BSD 3-Clause
}

// setup task dependencies to make sure the start sourceSets always get run
compileTestGroovy.dependsOn classes
sourceSets.test.compileClasspath += files(sourceSets.main.output.classesDirs)

// by default the Java plugin runs test on build, change to not do that (only run test if explicit task)
// no longer workds as of gradle 4.8 or possibly earlier, use clear() instead: check.dependsOn.remove(test)
check.dependsOn.clear()

test {
    dependsOn cleanTest
    include '**/*MoquiSuite.class'
    
    systemProperty 'moqui.runtime', '../runtime'
    systemProperty 'moqui.conf', 'conf/MoquiDevConf.xml'
    systemProperty 'moqui.init.static', 'true'

    testLogging.showStandardStreams = true; testLogging.showExceptions = true

    classpath += files(sourceSets.main.output.classesDirs); classpath += files(projectDir.absolutePath)
    // filter out classpath entries that don't exist (gradle adds a bunch of these), or ElasticSearch JarHell will blow up
    classpath = classpath.filter { it.exists() }

    beforeTest { descriptor -> logger.lifecycle("Running test: ${descriptor}") }
}

jar {
    manifest { attributes 'Implementation-Title': 'Moqui Framework Entity', 'Implementation-Version': version, 'Implementation-Vendor': 'nity.io Moqui Spring Boot Project' }
    from sourceSets.main.output
    // get all of the "resources" that are in component-standard directories instead of src/main/resources
    from fileTree(dir: projectDir.absolutePath, includes: ['data/**', 'entity/**', 'screen/**', 'service/**', 'template/**']) // 'xsd/**'
}

task copyDependencies { doLast {
    delete file(projectDir.absolutePath + '/dependencies')
    copy { from configurations.runtime; into file(projectDir.absolutePath + '/dependencies') }
    copy { from configurations.testCompile; into file(projectDir.absolutePath + '/dependencies') }
} }
